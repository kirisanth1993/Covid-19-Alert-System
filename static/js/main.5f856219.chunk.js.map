{"version":3,"sources":["logo.svg","components/Country/country.js","components/CountryList/CountryList.js","components/SearchBox/SearchBox.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Country","props","className","src","this","singleCountryStat","CountryCode","Active","Confirmed","Deaths","Recovered","React","Component","CountryList","covidStatus","map","status","index","key","SearchBox","type","onInput","searchTextHandler","placeholder","App","state","countries","virusStatus","searchKey","searchHandler","bind","e","setState","target","value","fetch","countryRes","json","forEach","country","a","Slug","statusRes","statusData","length","prevState","concat","ISO2","console","log","filteredCountries","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5f856219.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './Country.css';\r\n\r\nclass Country extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <div className=\"Country-block\">\r\n                <img className=\"country-flag\" src={`https://www.countryflags.io/${this.props.singleCountryStat.CountryCode}/shiny/64.png`}/>\r\n                <h3 className=\"text-center country-heading\">{this.props.singleCountryStat.Country}</h3>\r\n                <div className=\"row text-left information-text\">\r\n                    <div className=\"col-md-6\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">Active</div>\r\n                            <div className=\"col-md-4 text-right\">{this.props.singleCountryStat.Active}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">Confirmed</div>\r\n                            <div className=\"col-md-4 text-right\">{this.props.singleCountryStat.Confirmed}</div>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-md-6\">\r\n                    <div className=\"row\">\r\n                            <div className=\"col-md-6\">Death</div>\r\n                            <div className=\"col-md-4 text-right\">{this.props.singleCountryStat.Deaths}</div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">Recovered</div>\r\n                            <div className=\"col-md-4 text-right\">{this.props.singleCountryStat.Recovered}</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Country;","import React from 'react';\r\nimport Country from '../Country/country';\r\nimport './CountryList.css';\r\n\r\nclass CountryList extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    };\r\n\r\n    render(){\r\n        return (\r\n                <div className=\"country-list\">\r\n                    {\r\n                        this.props.covidStatus.map((status, index) => {\r\n                            return(\r\n                                    <div key={index}><Country singleCountryStat = { status }/></div>\r\n                            );\r\n                        })\r\n                    }\r\n                </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default CountryList;\r\n ","import React from 'react';\r\nimport './SearchBox.css';\r\n\r\nclass SearchBox extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <input type=\"text\" className=\"form-control input-section\" onInput={this.props.searchTextHandler} placeholder=\"Search Country ..\"/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBox;\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport CountryList from './components/CountryList/CountryList';\nimport SearchBox from './components/SearchBox/SearchBox';\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            countries: [],\n            virusStatus: [],\n            searchKey: ''\n        };\n        this.searchHandler = this.searchHandler.bind(this);\n    }\n\n    searchHandler(e){\n        this.setState({searchKey: e.target.value});\n    }\n\n    async componentDidMount(){\n        const countryRes = await fetch('https://api.covid19api.com/countries');\n        const countries = await countryRes.json();\n        this.setState({countries});\n\n        this.state.countries.forEach(async country => {\n            const statusRes = await fetch(`https://api.covid19api.com/total/country/${country.Slug}`);\n            const statusData = await statusRes.json();\n            if(statusData.length){\n                this.setState(prevState => (\n                    {virusStatus: prevState.virusStatus.concat({...statusData[statusData.length - 1], CountryCode: country.ISO2})}\n                ));\n            }\n        });\n    }\n\n    componentWillUnmount(){\n        console.log(\"iner of componentWillUnmount\");\n    }\n\n    render(){\n        const {virusStatus, searchKey} = this.state;\n        const filteredCountries = virusStatus.filter((status)=> status.Country.toLowerCase().includes(searchKey.toLowerCase()));\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <div className=\"pb-4\"><h1>Covid-19 Alert</h1></div>\n                    <SearchBox searchTextHandler = { this.searchHandler }/>\n                    <CountryList covidStatus = { filteredCountries }/>\n                </header>\n            </div>\n        );\n    }\n    }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}